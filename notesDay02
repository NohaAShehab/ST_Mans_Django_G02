#########
add list of products and display them


### add name to url

## add style to the pages

### add show button the each product

###############################################
connect the application to the database , ask the model to get the data from the database

1- connection to databases

    install postgres connector in the appliction

    pip install psycopg2-binary

    pip freeze

    ##################################################
    add connection conditionals to the settings.py


---> to create user in postgres
    create user pyg2 with password 'iti';
    create database django_blog;


in settings.py add the below

DATABASES = {
    'default': {
        'NAME': 'django_amazon',
        'ENGINE': 'django.db.backends.postgresql',
        'USER': 'pyg2',
        'PASSWORD': 'iti',
        'PORT':5432,
        'HOST':'127.0.0.1'
    },
}

###########################
How django deals with database

---->Django deals with the database using models

    Model 00> in django ---> represent table in the database
    --> use design pattern ORM ---> Object relational mapper
        ---> each table in the database is a class
        --> each record in the database is an object

    ===> you add the properties you need to a model class
        then you use this class to create table in the database

        products:
            name: char
            price : int
            desc : char
            image: char
            id :int  ((django will create it ))


----> django --> python manage.py makemigrations
    ---> command scan changes in all the models files in the projects applications
    ---> then create migration files ---> these files is used to apply the changes to the database


    --> to apply these changes to the database
        python manage.py migrate

in the first time you run this command :
django -- project ---> created with full created admin dashboard

Apply all migrations: admin, auth, contenttypes, products, sessions


to login to the admin dashboard --> you need a user

    python manage.py createsuperuser
----->

You can use this admin dashboard to controll your created model ---> Product

===> each application 000> has a file with name admin
you can use it to add the model to the admin dashboard


----> django provide shell for testing
    pip install ipython
    python manage.py shell

    from products.models import Product

django ===> ORM ---> queryset functions
https://docs.djangoproject.com/en/4.1/ref/models/querysets/
------------- get all products ------------
select * from products;
Product.objects.all()

---- get one object
select * from products where id =1;
Product.objects.filter(id=1);  # queryset --> loop on it to get the object
Product.object.get(id=1);  # return with only one object
Product.object.get(pk=1);

----- 3 operations

    add ---> use the  POST method when you submit the data from the client to the server
    edit
    delete
-------------------------------------------
lab:
    Post(title, description , image, no_of_likes)
    bloghome  ----> all posts (get these posts from the database)
    create post ---> save post in the database
    delete post, show post 








